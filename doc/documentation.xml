<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.tei-c.org/ns/1.0 file:/Users/wolf/Source/TEI-Simple/teisimple.xsd">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI-Simple Processing Model Implementation in XQuery</title>
                <author>Wolfgang Meier</author>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
            </publicationStmt>
            <sourceDesc>
                <p>App documentation</p>
            </sourceDesc>
        </fileDesc>
    </teiHeader>
    <text>
        <body>
            <div>
                <head>TEI-Simple Processing Model in XQuery</head>
                <p>This expath app package provides library functions to render a TEI-Simple
                    compliant document into various output formats based on the ODD extensions for
                    processing models. The main goal was to make it as simple as possible to use the
                    library from other applications dealing with TEI-Simple documents.</p>
                <p>The library takes as input:</p>
                <list>
                    <item>
                        a TEI-Simple compliant XML document
                    </item>
                    <item>an ODD file containing TEI-Simple processing model instructions</item>
                </list>
                <p>Rendering a document proceeds in two steps:</p>
                <list type="ordered">
                    <item>
                        <p>In a first step, the ODD file is pre-processed to generate an XQuery library module
                    which implements the processing model instructions. It mainly consists of a single
                    XQuery typeswitch transformation, which calls library functions. The names
                    of the library functions correspond to the processing model functions specified in the
                    behaviour attribute of each model element. There are different libraries for each output
                    type supported.
                </p>
                    </item>
                    <item>
                        <p>The second step is to pass the source TEI document through the generated XQuery library
                    module to render it (or parts thereof) into the desired output format.</p>
                    </item>
                </list>
                <p>For convenience, a utility module is provided, so library users do not need to bother with
                    pre-processing, code generation or caching. Instead they call a single main function.</p>
                <div>
                    <head>Usage</head>
                    <p>To use the library, import the utility module:</p>
                    <code lang="xquery">import module namespace pmu="http://www.tei-c.org/tei-simple/xquery/util" at "../content/util.xql";</code>
                    <p>The main function of the utility module is:</p>
                    <code lang="xquery">pmu:process($oddPath as xs:string, $xml as node()*, $output-root as xs:string, $mode as xs:string, $relPath as xs:string, $ext-modules as map(*)*)</code>
                    <p>The parameters are as follows:</p>
                    <table>
                        <row>
                            <cell>
                                <code>$oddPath</code>
                            </cell>
                            <cell>Absolute path to the ODD file containing the processing model instructions 
                                to use</cell>
                        </row>
                        <row>
                            <cell>
                                <code>$xml</code>
                            </cell>
                            <cell>The XML nodes to render. Any sequence of nodes is allowed here.</cell>
                        </row>
                        <row>
                            <cell>
                                <code>$output-root</code>
                            </cell>
                            <cell>Absolute path to a database collection which is used for 
                                caching the generated XQuery modules</cell>
                        </row>
                        <row>
                            <cell>
                                <code>$mode</code>
                            </cell>
                            <cell>The output mode: either "web" or "fo" (for PDF output)</cell>
                        </row>
                        <row>
                            <cell>
                                <code>$relPath</code>
                            </cell>
                            <cell>A relative URL pointing to the output collection given in 
                            <code>$output-root</code>. This will be used by the web browser to locate the generated
                            CSS stylesheets, so it should be relative to the page URL viewed in the 
                            browser.</cell>
                        </row>
                        <row>
                            <cell>
                                <code>$ext-modules</code>
                            </cell>
                            <cell>An optional sequence of XQuery modules containing custom behaviour functions.
                            See below for more.</cell>
                        </row>
                    </table>
                    <p>A simple main query to transform a TEI document into HTML may use the function
                        as follows:</p>
                    <code lang="xquery">xquery version "3.0";
                        
declare namespace output="http://www.w3.org/2010/xslt-xquery-serialization";

import module namespace pmu="http://www.tei-c.org/tei-simple/xquery/util" at "../content/util.xql";

declare option output:method "html";
declare option output:html-version "5.0";
declare option output:media-type "text/html";

let $doc := request:get-parameter("doc", ())
let $odd := request:get-parameter("odd", "teisimple.odd")
return
    if ($doc) then
        let $xml := doc("/db/test/" || $doc)
        return
            pmu:process("/db/test/" || $odd, $xml, "/db/test/generated", "web", "generated", ())
    else
        &lt;p&gt;No document specified&lt;/p&gt;</code>
                    <p>After calling this the first time, the specified output collection:
                    <code>/db/test/generated</code> should contain 3 new files:</p>
                    <list>
                        <item>teisimple-web.xql</item>
                        <item>teisimple-web-main.xql</item>
                        <item>teisimple.css</item>
                    </list>
                    <p>The CSS file is automatically included into the HTML header if the transformation
                    is run on a complete TEI document. If you would like to embed the generated HTML
                    into an existing page, you should import the CSS in the header manually.</p>
                </div>
                <div>
                    <head>Extension Modules</head>
                    <p>Where possible, developers should stick to the standard processing model functions for
                    defining behaviours. However, there might be situations in which one has to generate 
                    a specific type of output, which is not handled by the default function module. To facilitate this,
                    the implementation allows additional extension modules to be configured:</p>
                    <p>The last parameter to <code>pmu:process</code> may be a sequence of XQuery maps defining
                        extension modules to be loaded. Each map should specify the namespace URI, prefix and
                        location of an XQuery module to be imported. For example:</p>
                    <code lang="xquery">map {
    "uri": "http://www.tei-c.org/tei-simple/xquery/ext-html",
    "prefix": "ext",
    "at": "../modules/ext-html.xql"
};</code>
                    <p>defines an extension module stored in the <code>../modules/ext-html.xql</code>
                    XQuery module. Whenever the library tries to locate a processing model function
                    for a given behaviour, it will <hi rendition="simple:bold">first</hi> check any extension
                    module it knows to see if it contains a matching function. One can thus 
                        <hi rendition="simple:bold">overwrite</hi> the default
                    functions as well as define new ones.</p>
                    <p>To be recognized by the library, an extension function needs to accept at least
                    3 default arguments, plus any number of custom parameters (to be passed in the 
                    behaviour attribute).</p>
                    <p>For example, our extension module <code>ext-html.xql</code> may look as follows:</p>
                    <code lang="xquery">xquery version "3.1";

(:~
: Non-standard extension functions, mainly used for the documentation.
:)
module namespace pmf="http://www.tei-c.org/tei-simple/xquery/ext-html";

declare namespace tei="http://www.tei-c.org/ns/1.0";

declare function pmf:code($config as map(*), $node as element(), 
    $class as xs:string, $content as node()*, $lang as item()?) {
    &lt;pre class="sourcecode" data-language="{if ($lang) then $lang else 'xquery'}"&gt;
    {$config?apply($config, $content/node())}
    &lt;/pre&gt;
};</code>
                    <p>It defines one function, <code>pmf:code</code>, which can be called from the ODD as follows:</p>
                    <code lang="xml">&lt;model behaviour="code"&gt;
    &lt;param name="lang"&gt;@lang&lt;/param&gt;
&lt;/model&gt;</code>
                </div>
                <div>
                    <head>FO Output</head>
                    <p>When generating XSL:FO output, the implementation tries to translate the CSS rules
                        specified for renditions into the corresponding XSL:FO formatting properties.
                        Not all CSS properties are recognized. Unknown properties defined in a rendition 
                        will be ignored.</p>
                    <p>The default rendering for headings, paragraphs and the like is defined by a separate
                        CSS file. The implementation merges those defaults with the custom renditions given
                        in the ODD.</p>
                    <p>The library searches for default CSS styles in a file named 
                        <code>&lt;odd-name&gt;.fo.css</code> inside the specified output collection
                    (in which the generated XQuery files are stored). The style definitions are copied literally into attributes on
                    the output XSL:FO elements, so any property which is a valid attribute for the corresponding element 
                    may be used.</p>
                    <p>
                        The default styles file can also used to set general properties like the page
                        size or the appearance of the page header:</p>
                    <code lang="css">@page:left {
    margin-bottom: 10mm;
    margin-top: 10mm;
    margin-left: 36mm;
    margin-right: 18mm;
}
@page:right {
    margin-bottom: 10mm;
    margin-top: 10mm;
    margin-left: 18mm;
    margin-right: 36mm;
}
@page:head {
    margin-bottom: 0.7mm; 
    text-align-last: justify; 
    font-size: 10pt;
}</code>
                </div>
                <div>
                    <head>Best Practice Recommendations</head>
                    <list>
                        <item>
                            <p>While the ODD may describe the rendition of an element using CSS, this 
                                should be used with care: styling imposed by the ODD should be generic
                            and not interfere with application-specific design choices.</p>
                            <p>For example, defining a font family for a certain element in the ODD
                                makes it difficult for web designers to set the font via an external 
                                stylesheet.</p>
                            <p>The HTML as well as the FO output function libraries provide ways to
                                customize the styling through additional, user-supplied CSS.</p>
                        </item>
                    </list>
                </div>
            </div>
        </body>
    </text>
</TEI>