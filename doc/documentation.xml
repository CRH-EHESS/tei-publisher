<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI Processing Model Toolbox</title>
                <author>Wolfgang Meier</author>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
            </publicationStmt>
            <sourceDesc>
                <p>App documentation</p>
            </sourceDesc>
        </fileDesc>
    </teiHeader>
    <text>
        <body>
            <div>
                <head>TEI Processing Model Toolbox</head>
                <div>
                    <head>Introduction</head>
                    <p>The TEI Processing Model (PM) extends the TEI ODD format with a processing model for
                    documents, which can be expressed within the TEI vocubulary itself. It aims at the
                    XML-savvy editor who is familiar with TEI but is not a developer. The editor knows the logical 
                    structure of the text and maps it to a small set of abstract transformation functions, called
                    "behaviours". Predefined behaviours are, for example, "paragraph", "heading" or "note".</p>
                    <p>Basic styling features can be set directly within the ODD using CSS. The processing model
                    is media-agnostic: rendition styles are transparently translated into the different output media 
                    types like HTML, XSL-FO, LaTeX, or ePUB.</p>
                    <p>At the same time, the processing model implements a clean separation of concerns to improve
                    the workflow between editors, designers and developers. The editor defines how elements are 
                    mapped to behavior functions and specifies basic styling rules, the designer controls the 
                    overall presentation of the material, and the developer concentrates on the general application 
                    framework and—if necessary—supports the editor by providing custom behavior functions as 
                    extension modules.</p>
                    <p>A word of warning though: while the processing model was developed as part of the
                TEI Simple initiative, it is not necessarily "simple" regarding the knowledge it requires.
                The goal rather was to improve workflows and interoperability by providing a 
                minimal abstraction for the processing rules applied to a document. Using the processing model
                definitely simplifies the life of the developer, who often has to write a few thousand lines 
                just to render a particular TEI document to HTML, and then repeat that for PDF. It also
                empowers the scholary editor to create high-quality prototype websites from a given
                data set without even relying on a developer.</p>
                </div>
                <div>
                    <head>The Toolbox</head>
                    <p>The toolbox does a lot more than just implement the TEI processing model. It consists
                    of the following components:</p>
                    <list type="ordered">
                        <item>
                            A set of library modules to render a TEI document into various output formats, 
                            which is imported into other applications.
                        </item>
                        <item>
                            The core application to work and experiment with various documents and processing
                            model instances.
                        </item>
                        <item>
                            An application generator, which takes a processing model instance and creates 
                            a user interface around it, resulting in a stand alone web application for a
                            certain corpus of documents.
                        </item>
                    </list>
                    <p>So in a strict sense, only the first component implements the processing model specification. 
                        The larger part of the toolbox deals with graphical user interface components, adding
                    pagination, navigation and even some simple search features.</p>
                </div>
                <div>
                    <head>Getting Started</head>
                    <p>The toolbox is distributed as an eXist application package, making it easy to install
                    on any local or remote eXist database instance. Just go to the dashboard, open the package
                    manager and install the TEI processing model package from the public repository.</p>
                    <p>Once installed, play around with the provided documents or upload your own via the file
                    upload panel in the right sidebar. You may modify any of the supplied ODD files and see how
                    the rendering changes.</p>
                    <p>To create your own custom ODD, tailored to the data set you are working on, the general 
                        procedure is as follows:</p>
                    <list>
                        <item>Create a new customization</item>
                        <item>Overwrite the standard processing model rules for selected TEI elements or add
                        model rules for elements not handled by the standard ODD.</item>
                        <item>Test your modifications by applying the ODD and rendering a few documents.</item>
                    </list>
                    <p>The steps will be described in detail in the following sections.</p>
                    <div>
                        <head>Create a new customization</head>
                        <p>Create a new customization by entering a name and clicking "Create" at the bottom 
                            of the right sidebar panel listing the available ODDs. Reload the page to see
                            the new ODD appear in the list.</p>
                        <p>Open the created ODD using the "source" button. This will create a new browser tab
                        showing the editor which is part of eXist, called "eXide". The ODD will be loaded into 
                        it.</p>
                        <p>As you can see, the ODD is nearly empty, containing just boilerplate code. However,
                        it imports the standard <code>teisimple.odd</code> within the <code>schemaSpec</code>
                        element:</p>
                        <code lang="xml">&lt;schemaSpec ident="myteisimple" start="TEI teiCorpus" source="teisimple.odd"&gt;</code>
                        <p>This means your new ODD extends the standard <code>teisimple.odd</code>, which 
                        provides useful defaults for the TEI core elements. In general, most of those defaults
                        should be ok and you only need to overwrite a hand full of selected mappings within your
                        own ODD.</p>
                        <figure type="animated">
                            <head>Create a custom ODD</head>
                            <graphic url="CreateODD.gif"/>
                        </figure>
                    </div>
                </div>
                <div>
                    <head>Available Behaviours</head>
                    <p>All behaviour functions take at least one parameter: <code>content</code>. It
                    will be added by default unless specified and contains
                    the content of the currently processed node. You may change this by explicitely setting
                    a <code>content</code> parameter inside the model.</p>
                    <p>In the parameter lists below we skip the <code>content</code> parameter as it is available for
                        every behaviour.</p>
                    <list type="gloss">
                        <label>alternate</label>
                        <item>
                            <p>Display alternating elements for displaying the preferred version and an 
                                alternative, both at once or by some method of toggling between the two.
                                The concrete implementation depends on the output format.</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>default</cell>
                                    <cell>the content to display by default</cell>
                                </row>
                                <row>
                                    <cell>alternate</cell>
                                    <cell>alternate content</cell>
                                </row>
                            </table>
                        </item>
                        <label>anchor</label>
                        <item>
                            <p>Create an anchor to which you can link, identified by the given id.</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>id</cell>
                                    <cell>the id</cell>
                                </row>
                            </table>
                        </item>
                        <label>block</label>
                        <item>
                            <p>Create a block structure, usually a div in HTML or fo:block in fo.</p>
                        </item>
                        <label>body</label>
                        <item>
                            <p>Create the body of a document. In HTML this will result in a &lt;body&gt; tag.</p>
                        </item>
                        <label>break</label>
                        <item>
                            <p>Create a line, column, or page break according to type.</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>type</cell>
                                    <cell>e.g. "page", "column", "line"</cell>
                                </row>
                            </table>
                        </item>
                        <label>cell</label>
                        <item>
                            <p>Create a table cell. If the @cols or @rows attribute is specified, the cell may span several columns/rows.</p>
                        </item>
                        <label>cit</label>
                        <item>
                            <p>Show a citation, with an indication of the source.</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>source</cell>
                                    <cell>the citation source</cell>
                                </row>
                            </table>
                        </item>
                        <label>document</label>
                        <item>
                            <p>Start a new output document.</p>
                        </item>
                        <label>figure</label>
                        <item>
                            <p>Make a figure with provided title argument as caption</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>title</cell>
                                    <cell>a caption</cell>
                                </row>
                            </table>
                        </item>
                        <label>graphic</label>
                        <item>
                            <p>Display the graphic retrieved from the given url.</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>url</cell>
                                    <cell>the url to load the graphic from</cell>
                                </row>
                                <row>
                                    <cell>width</cell>
                                    <cell>the width of the graphic, e.g. "300px", "50%" ...</cell>
                                </row>
                                <row>
                                    <cell>height</cell>
                                    <cell>the height of the graphic, e.g. "300px", "50%" ...</cell>
                                </row>
                                <row>
                                    <cell>scale</cell>
                                    <cell>a scaling factor to apply. If specified, width and height will be output as percentage based on the scaling factor, which
                                    should be a number between 0 and 1.</cell>
                                </row>
                                <row>
                                    <cell>title</cell>
                                    <cell>a title for the graphics element. Usually not shown directly.</cell>
                                </row>
                            </table>
                        </item>
                        <label>heading</label>
                        <item>
                            <p>Creates a heading.</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>level</cell>
                                    <cell>the structural level of this heading. In HTML mode, this translates to &lt;h1&gt;, &lt;h2&gt; etc.</cell>
                                </row>
                            </table>
                        </item>
                        <label>inline</label>
                        <item>
                            <p>Outputs an inline element.</p>
                        </item>
                        <label>link</label>
                        <item>
                            <p>Create a hyperlink.</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>uri</cell>
                                    <cell>the link url</cell>
                                </row>
                            </table>
                        </item>
                        <label>list</label>
                        <item>
                            <p>Creates an ordered or unordered list, depending on the type attribute (e.g. <code>type="ordered"</code>). If a label
                            is present before each item, a description list is output instead, using the label as definition term.</p>
                        </item>
                        <label>listItem</label>
                        <item>
                            <p>Outputs an item in a list.</p>
                        </item>
                        <label>metadata</label>
                        <item>
                            <p>Outputs a metadata section, e.g. a &lt;head&gt; in HTML.</p>
                        </item>
                        <label>note</label>
                        <item>
                            <p>create a note, often out of line, depending
                                on the value of <term>place</term>; could be "margin", "footnote", "endnote", "inline"</p>
                            <table>
                                <row role="label">
                                    <cell>Parameter</cell>
                                    <cell>Description</cell>
                                </row>
                                <row>
                                    <cell>place</cell>
                                    <cell>defines the placement of the note, e.g. "margin", "footnote" ...</cell>
                                </row>
                                <row>
                                    <cell>label</cell>
                                    <cell>the label to use for the footnote reference, usually a number.</cell>
                                </row>
                            </table>
                        </item>
                        <label>omit</label>
                        <item>
                            Do nothing, skip this element, do not process children
                        </item>
                        <label>paragraph</label>
                        <item>
                            Create a paragraph.
                        </item>
                        <label>row</label>
                        <item>
                            Create a table row.
                        </item>
                        <label>section</label>
                        <item>Create a new section in the output document. In HTML mode, this translates to a &lt;section&gt; element being output.</item>
                        <label>table</label>
                        <item>Create a table.</item>
                        <label>text</label>
                        <item>Output literal text.</item>
                        <label>title</label>
                        <item>Output the document title. In HTML mode, this creates a &lt;title&gt; element. In LaTeX, it adds the title to the document metadata.</item>
                    </list>
                </div>
                <div>
                    <head>Output Media</head>
                    <p>The library supports various output media formats and translates styles into the corresponding format. Currently the following output modes
                        are supported and can be used in the <code>@output</code> attribute:</p>
                    <list type="gloss">
                        <label>web</label>
                        <item>Produces HTML output</item>
                        <label>fo</label>
                        <item>Generates a PDF via XSL:FO</item>
                        <label>latex</label>
                        <item>Creates a PDF via LaTeX</item>
                        <label>print</label>
                        <item>An alias which applies to both: fo and latex modes.</item>
                        <label>epub</label>
                        <item>Similar to web concerning features, but targetted at epub documents</item>
                    </list>
                    <p>The quality of the generated output may vary a lot for the fo and latex modes, depending on the type of input document. The following
                    section provides more details on the configuration of the FO output option:</p>
                    <div>
                        <head>FO Output</head>
                        <p>When generating XSL:FO output, the implementation tries to translate the CSS rules
                            specified for renditions into the corresponding XSL:FO formatting properties.
                            Not all CSS properties are recognized or can be mapped to FO properties. Unknown properties defined in a rendition 
                            will be ignored.</p>
                        <p>The default rendering for headings, paragraphs and the like is defined by a separate
                            CSS file. The implementation merges those defaults with the custom renditions given
                            in the ODD.</p>
                        <p>The library searches for default CSS styles in a file named 
                            <code>&lt;odd-name&gt;.fo.css</code> inside the specified output collection
                            (in which the generated XQuery files are stored). The style definitions are copied literally into attributes on
                            the output XSL:FO elements, so any property which is a valid attribute for the corresponding element 
                            may be used.</p>
                        <p>
                            The default styles file can also used to set general properties like the page
                            size or the appearance of the page header:</p>
                        <code lang="css">@page:left {
    page-height: 297mm; 
    page-width: 210mm;
    margin-bottom: 10mm;
    margin-top: 10mm;
    margin-left: 28mm;
    margin-right: 16mm;
}
@page:right {
    page-height: 297mm; 
    page-width: 210mm;
    margin-bottom: 10mm;
    margin-top: 10mm;
    margin-left: 16mm;
    margin-right: 28mm;
}
@page:right-body {
    column-count: 2;
    column-gap: 6mm;
}
@page:left-body {
    column-count: 2;
    column-gap: 6mm;
}
@page:head {
    font-family: "Junicode";
}</code>
                    </div>
                    <div>
                        <head>LaTeX Output</head>
                        <p>The latex output mode produces good results for longer texts which fit well into the pre-defined LaTeX environments. The number
                            of supported CSS properties is limited though:</p>
                        <list>
                            <item>font-weight</item>
                            <item>font-style</item>
                            <item>font-variant</item>
                            <item>font-size</item>
                            <item>color</item>
                            <item>text-decoration</item>
                            <item>text-align</item>
                            <item>text-indent</item>
                        </list>
                        <p>We're looking for contributors familiar with TeX to support more properties.</p>
                    </div>
                </div>
                <div xml:id="appgen">
                    <head>Using the App Generator</head>
                    <p>The App Generator takes an ODD file and generates a complete, standalone application
                        out of it, including features like a simple search facility.</p>
                </div>
                <div>
                    <head>Extension Modules</head>
                    <p>Where possible, developers should stick to the standard processing model functions for
                    defining behaviours. However, there might be situations in which one has to generate 
                    a specific type of output, which is not handled by the default function module. To facilitate this,
                    the implementation allows additional extension modules to be configured:</p>
                    <p>Configuration is done via an XML file which should reside in the same collection as the source ODD files.
                        It contains a series of <tag>output</tag> elements, each listing the extension modules to be loaded
                        for the given output mode. Each definition may optionally be limited to a specific ODD, whose name
                        is specified in the <att>odd</att> attribute.</p>
                    <code lang="xml">&lt;modules&gt;
    &lt;!-- General fo extension functions --&gt;
    &lt;output mode="print"&gt;
        &lt;module mode="print" uri="http://www.tei-c.org/tei-simple/xquery/ext-fo" prefix="ext-fo" at="../modules/ext-fo.xql"/&gt;
    &lt;/output&gt;
    &lt;!-- Special web configuration for the documentation (to handle &lt;code&gt;) --&gt;
    &lt;output mode="web" odd="documentation"&gt;
        &lt;module mode="html" uri="http://www.tei-c.org/tei-simple/xquery/ext-html" prefix="ext-html" at="../modules/ext-html.xql"/&gt;
    &lt;/output&gt;
&lt;/modules&gt;</code>
                    <p>Whenever the library tries to locate a processing model function
                    for a given behaviour, it will <hi rendition="simple:bold">first</hi> check any extension
                    module it knows to see if it contains a matching function. One can thus 
                        <hi rendition="simple:bold">overwrite</hi> the default
                    functions as well as define new ones.</p>
                    <p>To be recognized by the library, an extension function needs to accept at least
                    4 default arguments, plus any number of custom parameters (to be passed in the 
                    behaviour attribute). The processing model implementation tries to fill each custom parameter
                    with a corresponding value by looking through the <tag>param</tag> tags in the ODD to find
                        one with a name matching the variable name. If no matching parameter can be found, the
                        function argument will be set to the empty sequence<note place="bottom">You should not enforce a type 
                        or cardinality for any of the custom parameters as this may lead to unexpected errors. The parameters
                        may always be empty or contain more than one item.</note>. The default <code>$content</code>
                        will always be filled, except for empty elements.</p>
                    <p>For example, our extension module <code>ext-html.xql</code> may look as follows:</p>
                    <code lang="xquery">xquery version "3.1";

(:~
: Non-standard extension functions, mainly used for the documentation.
:)
module namespace pmf="http://www.tei-c.org/tei-simple/xquery/ext-html";

declare namespace tei="http://www.tei-c.org/ns/1.0";

declare function pmf:code($config as map(*), $node as element(), 
    $class as xs:string, $content as node()*, $lang as item()?) {
    &lt;pre class="sourcecode" data-language="{if ($lang) then $lang else 'xquery'}"&gt;
    {$config?apply($config, $content/node())}
    &lt;/pre&gt;
};</code>
                    <p>It defines one function, <code>pmf:code</code>, which can be called from the ODD as follows:</p>
                    <code lang="xml">&lt;model behaviour="code"&gt;
    &lt;param name="lang"&gt;@lang&lt;/param&gt;
&lt;/model&gt;</code>
                </div>
                <div>
                    <head>Best Practice Recommendations</head>
                    <list>
                        <item>
                            <p>While the ODD may describe the rendition of an element using CSS, this 
                                should be used with care: styling imposed by the ODD should be generic
                            and not interfere with application-specific design choices.</p>
                            <p>For example, defining a font family for a certain element in the ODD
                                makes it difficult for web designers to set the font via an external 
                                stylesheet.</p>
                            <p>The HTML as well as the FO output function libraries provide ways to
                                customize the styling through additional, user-supplied CSS.</p>
                        </item>
                    </list>
                </div>
            </div>
        </body>
    </text>
</TEI>