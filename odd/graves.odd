<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Graves' Letters
                    <desc>Modern correspondence with visualisation of prosopographical and geographical information</desc>
                </title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <revisionDesc>
            <change when="2018-08-05+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="graves" source="teipublisher.odd">
                <elementSpec ident="name" mode="change">
                    <model predicate="$parameters?mode='facets' and @type='person'" behaviour="webcomponent">
            <param name="name" value="'pb-highlight'"/>
            <param name="content" value="id(substring-after(@ref, '#'), root(.))"/>
            <param name="key" value="substring-after(@ref, '#')"/>
            <param name="subscribe" value="'letter'"/>
            <param name="emit" value="'facets'"/>
            <outputRendition>
            display: block;
            </outputRendition>
        </model>
                    <model predicate="$parameters?mode='facets' and @type='place'" behaviour="webcomponent">
            <param name="content" value="id(substring-after(@ref, '#'), root(.))"/>
            <param name="name" value="'pb-highlight'"/>
            <param name="key" value="substring-after(@ref, '#')"/>
            <param name="scroll" value="true()"/>
            <param name="subscribe" value="'letter'"/>
            <param name="emit" value="'facets'"/>
            <outputRendition>
            display: block;
            </outputRendition>
        </model>
                    <model predicate="@type='place' and id(substring-after(@ref, '#'), root(.))/location/geo" behaviour="webcomponent">
            <param name="name" value="'pb-geolocation'"/>
            <param name="longitude" value="tokenize(id(substring-after(@ref, '#'), root(.))/location/geo, ' ')[2]"/>
            <param name="latitude" value="tokenize(id(substring-after(@ref, '#'), root(.))/location/geo, ' ')[1]"/>
            <param name="label" value="id(substring-after(@ref, '#'), root(.))/placeName"/>
            <param name="key" value="substring-after(@ref, '#')"/>
            <param name="scroll" value="true()"/>
            <param name="emit" value="'letter'"/>
            <param name="duration" value="1000"/>
            <outputRendition>
            
            
            
            
            
            
                            color: #1565c0;
cursor: pointer;
                        
            
            
            
            
            
            </outputRendition>
        </model>
                    <model predicate="@type='person' and id(substring-after(@ref, '#'), root(.))" behaviour="webcomponent">
            <param name="name" value="'pb-highlight'"/>
            <param name="content" value="."/>
            <param name="key" value="substring-after(@ref, '#')"/>
            <param name="scroll" value="true()"/>
            <param name="emit" value="'letter'"/>
            <outputRendition>
            
            
            
            
            
            
                            color: #bf360c;
cursor: pointer;
                        
            
            
            
            
            
            </outputRendition>
        </model>
                    <model predicate="@type='place'" behaviour="inline">
            <outputRendition>
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change"/>
            <elementSpec ident="dateline" mode="change">
                    <model behaviour="block" useSourceRendition="true">
            <outputRendition>
            float: right;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model behaviour="omit">
            <param name="type" value="'page'"/>
            <param name="label" value="(concat(if(@n) then concat(@n,' ') else '',if(@facs) then                   concat('@',@facs) else ''))"/>
            <outputRendition>
            display: block; margin-left: 4pt; color: grey; float: right;
            </outputRendition>
            <outputRendition>
            content: '[Page ';
            </outputRendition>
            <outputRendition>
            content: ']';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="closer" mode="change">
                    <model behaviour="block">
            <outputRendition>
            margin: 3em 1em 20px;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="body" mode="change">
                    <modelSequence predicate="$parameters?mode='facets'">
            <model behaviour="heading">
                <param name="content" value="'Places'"/>
                <param name="level" value="2"/>
                <outputRendition>
                
                
                
                
                
                
















                                font-weight: 200;
border-bottom: 1px solid #A0A0A0;
















                            
                
                
                
                
                
                </outputRendition>
            </model>
            <model behaviour="block">
                <param name="content" value="for $n in .//name[@type='place'] group by $ref := $n/@ref order by $ref return $n[1]"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'People'"/>
                <param name="level" value="2"/>
                <outputRendition>
                
                
                
                
                
                





                                font-weight: 200;
border-bottom: 1px solid #A0A0A0;





                            
                
                
                
                
                
                </outputRendition>
            </model>
            <model behaviour="section">
                <param name="content" value="for $n in .//name[@type='person'] group by $ref := $n/@ref order by $ref return $n[1]"/>
            </model>
        </modelSequence>
                    <modelSequence>
            <model behaviour="index">
                <param name="type" value="'toc'"/>
            </model>
            <model behaviour="block"/>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="place" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="string-join(placeName, ', ')"/>
                <param name="level" value="3"/>
                <outputRendition>
                margin-bottom: 0;
                </outputRendition>
            </model>
            <model predicate="location/geo" behaviour="block">
                <param name="content" value="location/geo"/>
                <outputRendition>
                font-size: .75em;
                </outputRendition>
            </model>
            <model behaviour="block">
                <param name="content" value="string-join(location/*[not(self::geo)], ', ')"/>
                <outputRendition>
                font-size: .75em;
                </outputRendition>
            </model>
            <model behaviour="block">
                <param name="content" value="note/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="geo" mode="add">
                    <modelSequence behaviour="inline">
            <model behaviour="inline">
                <param name="content" value="'Location: '"/>
            </model>
            <model behaviour="webcomponent">
                <param name="name" value="'pb-geolocation'"/>
                <param name="latitude" value="tokenize(., ' ')[1]"/>
                <param name="longitude" value="tokenize(., ' ')[2]"/>
                <param name="content" value="."/>
                <param name="emit" value="'letter'"/>
                <outputRendition>
                
                color: #1565c0;
cursor: pointer;
                
                </outputRendition>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="opener" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="persName"/>
                <param name="level" value="3"/>
                <outputRendition>
                margin-bottom: 0;
                </outputRendition>
            </model>
            <model predicate="birth or death or occupation" behaviour="block">
                <param name="content" value="(occupation, birth, death)"/>
                <outputRendition>
                
                font-size: .85em;
margin-bottom: .5em;
                
                </outputRendition>
            </model>
            <model predicate="idno" behaviour="block">
                <param name="content" value="idno"/>
            </model>
            <model behaviour="block">
                <param name="content" value="note/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="postscript" mode="change">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="('Postscript by ', id(substring-after(@resp, '#'), root(.))/persName)"/>
                <param name="level" value="5"/>
                <outputRendition>
                
                
                
                margin-top: 10px;
padding-top: 10px;
border-top: 1px solid #A0A0A0;
font-style: italic;
                
                
                
                </outputRendition>
            </model>
            <model behaviour="block"/>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model predicate="forename or surname" behaviour="inline">
            <param name="content" value="(forename, ' ', surname[not(@type='married')], if (surname[@type='married']) then (' (', string-join(surname[@type='married'], ', '), ')') else ())"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="birth" mode="add">
                    <model predicate="following-sibling::death" behaviour="inline">
            <param name="content" value="('* ', ., '; ')"/>
        </model>
                    <model behaviour="inline">
            <param name="content" value="('* ', .)"/>
        </model>
                </elementSpec>
                <elementSpec ident="death" mode="add">
                    <model behaviour="inline">
            <param name="content" value="('✝', .)"/>
        </model>
                </elementSpec>
                <elementSpec ident="occupation" mode="add">
                    <model behaviour="inline">
            <param name="content" value="(., ' ')"/>
        </model>
                </elementSpec>
            <elementSpec ident="idno" mode="add">
                    <model predicate="@type='VIAF' and following-sibling::idno" behaviour="link">
            <param name="link" value="'https://viaf.org/viaf/' || string() || '/'"/>
            <param name="content" value="'VIAF'"/>
            <outputRendition scope="after">
            content: ', ';
            </outputRendition>
        </model>
                    <model predicate="@type='VIAF'" behaviour="link">
            <param name="link" value="'https://viaf.org/viaf/' || string() || '/'"/>
            <param name="content" value="'VIAF'"/>
        </model>
                    <model predicate="@type='LC-Name-Authority-File' and following-sibling::idno" behaviour="link">
            <param name="link" value="'https://lccn.loc.gov/' || string()"/>
            <param name="content" value="'LoC Authority'"/>
            <outputRendition>
            content: ', ';
            </outputRendition>
        </model>
                    <model predicate="@type='LC-Name-Authority-File'" behaviour="link">
            <param name="link" value="'https://lccn.loc.gov/' || string()"/>
            <param name="content" value="'LoC Authority'"/>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>